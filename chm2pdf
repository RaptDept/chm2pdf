#!/usr/bin/env python
'''
CHM2PDF

A script that converts a CHM compiled HTML file into a single PDF file.
(c) Massimo Sandal, 2007

Released under the GNU GPL version 2 or later.
'''

import chm.chm as chm
import sys
import sgmllib
import os, os.path
import re, glob

global TEMP_DIR #where conversions etc. take place
global TEMP_OUT #where the chm file is exploded
global filename #the input filename

TEMP_DIR='temp' 
TEMP_OUT='tempout'

class PageLister(sgmllib.SGMLParser):
    '''
    parser of the chm.chm GetTopicsTree() method that retrieves the URL of the HTML
    page embedded in the CHM file.
    '''
    def reset(self):
        sgmllib.SGMLParser.reset(self)
        self.pages=[]
        
    def start_param(self,attrs):
       urlparam_flag=False
       for key,value in attrs:
           if key=='name' and value=='Local':
               urlparam_flag=True
           if urlparam_flag and key=='value':
               self.pages.append('/'+value)  
     
class ImageCatcher(sgmllib.SGMLParser):
    '''
    finds image urls in the current html page, so to take them out from the chm file.
    '''
    def reset(self):
        sgmllib.SGMLParser.reset(self)
        self.imgurls=[]
        
    def start_img(self,attrs):
        for key,value in attrs:
            if key=='src':
                self.imgurls.append(value)
     
def get_html_list(cfile):
    '''
    retrieves the list of HTML files contained into the CHM file, **in order** (that's the important bit).
    (actually performed by the PageLister class)
    '''
    topicstree=cfile.GetTopicsTree()
    lister=PageLister()
    lister.feed(topicstree)
    #print 'lister pages',lister.pages
    return lister.pages

def get_objective_urls_list(filename):
    '''
    takes the list of files inside the chm archive, with the correct urls of each one.
    '''
    os.system('enum_chmLib '+filename+' > '+TEMP_DIR+'/urlslist.txt')
    flist=open(TEMP_DIR+'/urlslist.txt','r')
    urls_list=[]
    for line in flist.readlines()[3:]:
        #print 'line',line
        spline=line.split()
        urls_list.append(spline[5])
    flist.close()
    os.remove(TEMP_DIR+'/urlslist.txt')
    
    return urls_list

def convert_to_pdf(cfile, filename, outputfilename):
    '''
    Performs actual converting.
    '''
    try:
        os.mkdir(TEMP_DIR)
    except OSError: #there is already the directory
        pass
    
    html_list=get_html_list(cfile)
    objective_urls=get_objective_urls_list(filename)
    true_html_list=[] #Should mostly coincide with html_list, but...
    
    for html_file in html_list:
        for item in objective_urls:
            if html_file in item:
                true_html_list.append(TEMP_OUT+item)
    
    os.chdir(TEMP_DIR)
    c=0
    print 'Converting individual HTML pages in PDF...'
    for url in html_list:
        c+=1
        page_filename='../'+TEMP_OUT+'/'+url
        
        pf=open(page_filename,'r')
        page=pf.read()
        pf.close()
        
        #give the correct image links to the html file
        image_catcher=ImageCatcher()
        image_catcher.feed(page)
        
        #We substitute the image URLs of the html files with the *actual* URLs on the temp directory
        for iurl in image_catcher.imgurls:            
            for item in objective_urls:
                if iurl in item:
                    img_filename='../'+TEMP_OUT+item
                    if ';' in img_filename: #hack to get rid of mysterious ; in filenames and urls...
                        img_filename=img_filename.split(';')[0]
            #substitute the new image filenames
            page=re.sub(iurl,img_filename,page)
            
        f=open('temp.html','w')
        f.write(page)
        f.close
        #hack to guarantee that the file has been wholly written
        f=open('temp.html','r')
        while len(f.read()) < len(page):
            pass
        f.close()
        
        #convert each html page with htmldoc
        os.system ("htmldoc -t pdf --size 'A4' --webpage 'temp.html' -f "+'%(#)04d' %{"#":c}+".pdf > /dev/null")
        os.remove('temp.html')
        
    
    #concatenation
    print 'Concatenating '+str(c)+' individual PDF files...'
    os.system("pdftk *.pdf cat output ../"+outputfilename)
    
    #remove temporary files
    print 'Removing temporary files'
    os.system("rm *.pdf")
    os.chdir('..')
    os.rmdir(TEMP_DIR)
    os.system('rm -r '+TEMP_OUT)
    
    print 'Done.'
    
def help():
    print 'Usage: chm2pdf [input filename] [output filename]'

def main(argv):
    if len(argv)==1:
        help()
        return
    elif len(argv)==2:
        filename = argv[1]
        outputfilename = argv[1]+'.pdf'
    else:
        filename = argv[1]
        outputfilename = argv[2]
 
    if not os.path.exists(filename):
        print 'File not found!'
        return
    
    cfile = chm.CHMFile()
    cfile.LoadCHM(filename)
    os.system('extract_chmLib ' + filename +' '+TEMP_OUT)
    convert_to_pdf(cfile, filename, outputfilename)


if __name__ == '__main__':
    main(sys.argv)
    